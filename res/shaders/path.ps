std::string pathFragmentShader = R"(

#version 330 core
out vec4 FragColor;
in vec4 ourColor;
in vec2 ourPos;
in vec2 ourRefPoint;
in vec2 ourDimension;
uniform vec3 backgroundColor;
uniform bool enableAnimation;
uniform float colorCycle;
uniform float time;

//	Function to convert HSV to RGB
vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
void main()
{
	// Calculate hue value based on time
	float hue = mod(time * colorCycle, 1.0);

	// Convert hue to RGB color
	vec3 colorToShow = hsv2rgb(vec3(hue, 1.0, 1.0));
	
	if (hue == 0.0f)
	{
		colorToShow = ourColor.xyz;
	}

	vec2 uv;
	float d;
	vec3 finalColor;

	if (ourDimension.y > ourDimension.x)
	{
		uv = 2.0f * (abs(ourPos - ourRefPoint)/ourDimension) - 1.0f;
		d = (uv.x - 0.005) * (uv.x + 0.005);
	}
	else
	{
		uv = 2 * (abs(ourPos - ourRefPoint)/ourDimension) - 1.0;
		d = (uv.y - 0.005) * (uv.y + 0.005);
	}

	vec3 col = vec3(step(0., -d));
	float glow = 0.001/d;
	glow = clamp(glow, 0., 1.);
	col += 100. * glow;

	if (enableAnimation)
	{
		finalColor = (col+vec3(0.2)) * colorToShow;
	}
	else
	{
		finalColor = (col+vec3(0.2)) * ourColor.xyz;
	}

	FragColor = vec4(finalColor, ourColor.w);
};

)";